from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
vetiver.prepare_docker(model_board, "cars_mpg")
vetiver.prepare_docker(model_board, "cars_mpg")
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
import pins
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
import pins
vetiver.prepare_docker(model_board, "cars_mpg")
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
import pins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
import os
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Define path
model_path = "/data/model"
os.makedirs(model_path, exist_ok=True)  # Ensure directory exists
# Create a Vetiver model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
from pins import board_folder
model_board = board_folder('/data/model', allow_pickle_read=True)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder(
"/data/model",
allow_pickle_read = True
)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
vetiver.prepare_docker(model_board, "cars_mpg")
import vetiver
vetiver.prepare_docker(model_board, "cars_mpg")
app.run(port = 8080)
import vetiver
vetiver.prepare_docker(model_board, "cars_mpg")
import vetiver
vetiver.prepare_docker(model_board, "cars_mpg")
import vetiver
vetiver.prepare_docker(model_board, "penguin_model")
import vetiver
vetiver.prepare_docker(model_board, "penguin_model")
import vetiver
vetiver.prepare_docker(model_board, "penguin_model")
vetiver.prepare_docker(model_board, "penguin_model")
vetiver.prepare_docker(model_board, "penguinn_model")
vetiver.prepare_docker(model_board, "penguin_model")
# In the new app.py
from my_app import additional_routes
# Setup your FastAPI app instance and include routes from my_app
app.include_router(additional_routes)
vetiver.prepare_docker(model_board, "penguin_model")
vetiver.prepare_docker(model_board, "penguin_model")
vetiver.prepare_docker(model_board, "cars_mpg")
vetiver.prepare_docker(model_board, "penguin_model")
vetiver.prepare_docker(model_board, "model_board")
vetiver.prepare_docker(model_board, "penguin_model")
vetiver.prepare_docker(v, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(model_board, "penguin_model")
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
import pins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
import os
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Define path
model_path = "/data/model"
os.makedirs(model_path, exist_ok=True)  # Ensure directory exists
# Create a Vetiver model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
from pins import board_folder
model_board = board_folder('/data/model', allow_pickle_read=True)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder(
"/data/model",
allow_pickle_read = True
)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
app.run(port = 8080)
vetiver.prepare_docker(model_board, "penguin_model")
vetiver.prepare_docker(model_board, "penguin_model")
docker run --rm -d \
-p 8080:8080 \
--name penguin-model \
-v /data/model:/data/model \
penguin-model
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
import pins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
import os
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Define path
model_path = "/data/model"
os.makedirs(model_path, exist_ok=True)  # Ensure directory exists
# Create a Vetiver model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
from pins import board_folder
model_board = board_folder('/data/model', allow_pickle_read=True)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder(
"/data/model",
allow_pickle_read = True
)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
quit
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
reticulate::repl_python()
import duckdb
from palmerpenguins import load_penguins
import duckdb
from palmerpenguins import load_penguins
import duckdb
from palmerpenguins import load_penguins
# Connect to DuckDB; it will create the database file if it does not exist
con = duckdb.connect('my-db.duckdb')
# Load the penguins dataset from the palmerpenguins package
df = load_penguins()
# Create a table in DuckDB from the DataFrame
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
# Close the connection
con.close()
import duckdb # pip install it if its not working
from palmerpenguins import load_penguins
con = duckdb.connect('my-db.duckdb')
df = load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
quit
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
reticulate::repl_python()
reticulate::repl_python()
con = duckdb.connect('my-db.duckdb')
df = load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
quit
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
install.packages("DBI")
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
install.packages("tidyselect")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
install.packages("DBI")
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
reticulate::repl_python()
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
import pins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
import os
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Define path
model_path = "/data/model"
os.makedirs(model_path, exist_ok=True)  # Ensure directory exists
# Create a Vetiver model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
from pins import board_folder
model_board = board_folder('/data/model', allow_pickle_read=True)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder(
"/data/model",
allow_pickle_read = True
)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
app.run(port = 8080)
vetiver.prepare_docker(model_board, "penguin_model")
import duckdb # pip install it if its not working
from palmerpenguins import load_penguins
vetiver.prepare_docker(model_board, "penguin_model")
import duckdb # pip install it if its not working
from palmerpenguins import load_penguins
import duckdb # pip install it if its not working
from palmerpenguins import load_penguins
con = duckdb.connect('my-db.duckdb')
df = load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
import duckdb # pip install it if its not working
from palmerpenguins import load_penguins
con = duckdb.connect('my-db.duckdb')
df = load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
vetiver.prepare_docker(model_board, "penguin_model")
import vetiver
vetiver.prepare_docker(model_board, "penguin_model")
import duckdb # pip install it if its not working
from palmerpenguins import load_penguins
con = duckdb.connect('my-db.duckdb')
df = load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
import duckdb # pip install it if its not working
from palmerpenguins import load_penguins
con = duckdb.connect('my-db.duckdb')
df = load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
con = duckdb.connect('my-db.duckdb')
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
DBI::dbDisconnect(con)
DBI::dbDisconnect(con)
quit
DBI::dbDisconnect(con)
reticulate::repl_python()
con = duckdb.connect('my-db.duckdb')
df = load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
return d
return d
return d
return d
"species_Chinstrap" : input.species() == "Chinstrap"
"bill_length_mm" : input.bill_length(),
return d
return d
return d
return r.json().get('predict')[0]
app.run(port = 8080)
logging.info("App Started")
return r.json().get('predict')[0]
quit
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
install.packages("DBI")
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
import pins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
import os
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Define path
model_path = "/data/model"
os.makedirs(model_path, exist_ok=True)  # Ensure directory exists
# Create a Vetiver model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
from pins import board_folder
model_board = board_folder('/data/model', allow_pickle_read=True)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder(
"/data/model",
allow_pickle_read = True
)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
app.run(port = 8080)
import vetiver
vetiver.prepare_docker(model_board, "penguin_model")
import duckdb # pip install it if its not working
from palmerpenguins import load_penguins
con = duckdb.connect('my-db.duckdb')
df = load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
quit
DBI::dbDisconnect(con, shutdown = TRUE)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
DBI::dbDisconnect(con, shutdown = TRUE )
reticulate::repl_python()
con.close()
quit
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
DBI::dbDisconnect(con, shutdown = TRUE )
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
import pins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
import os
from vetiver import VetiverModel, vetiver_pin_write
from pins import board_folder
# Define path
model_path = "/data/model"
os.makedirs(model_path, exist_ok=True)  # Ensure directory exists
# Create a Vetiver model
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
from pins import board_folder
model_board = board_folder('/data/model', allow_pickle_read=True)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
model_board = board_folder(
"/data/model",
allow_pickle_read = True
)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
renv::snapshot()
library(rmarkdown)
